name: PR File Analysis
on:
  pull_request:
    types: [opened, synchronize]
permissions:
  pull-requests: write
  contents: read
jobs:
  analyze-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to ensure we can access the changed files
      
      - name: Get changed files
        id: changed-files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path')
          echo "Changed files: $CHANGED_FILES"
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Analyze files and post line comments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          API_URL="https://60dc-41-83-7-60.ngrok-free.app/analyze/code"
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          # Process each file individually
          for FILE in $CHANGED_FILES; do
            if [ -f "$FILE" ]; then
              echo "Processing file: $FILE"
              # Get file content and escape properly for JSON
              FILE_CONTENT=$(cat "$FILE" | jq -Rs .)
              # Create JSON payload for this file
              JSON_PAYLOAD="{\"code\": $FILE_CONTENT, \"filename\": \"$FILE\"}"
              echo "Sending request for $FILE..."
              
              # Send to API and capture response
              RESPONSE=$(curl -s -X POST "$API_URL" \
                -H "Content-Type: application/json" \
                -d "$JSON_PAYLOAD")
                
              echo "API Response for $FILE:"
              echo "$RESPONSE"
              
              # Extract the message from the API response (assuming it's in a 'message' field)
              # Modify the jq extraction based on your actual API response structure
              ANALYSIS_MESSAGE=$(echo "$RESPONSE" | jq -r '.message // .feedback // .analysis // .')
              
              # If the response is still a JSON object, try to extract a string representation
              if [[ $ANALYSIS_MESSAGE == {* ]]; then
                ANALYSIS_MESSAGE=$(echo "$ANALYSIS_MESSAGE" | jq -r 'if type == "object" then . | tostring else . end')
              fi
              
              # Get the first line number of the file in the PR
              # This is a simplification - ideally you'd determine the most relevant line for each comment
              LINE_NUMBER=$(gh pr view $PR_NUMBER --json files --jq ".files[] | select(.path == \"$FILE\") | .additions_count" || echo "1")
              if [ -z "$LINE_NUMBER" ] || [ "$LINE_NUMBER" == "null" ]; then
                LINE_NUMBER=1
              fi
              
              echo "Adding review comment on $FILE at line $LINE_NUMBER"
              
              # Post the comment on the specific file and line
              gh pr review $PR_NUMBER --comment --body "$ANALYSIS_MESSAGE" --file "$FILE" --line "$LINE_NUMBER"
              
              echo "-----------------------------------"
            fi
          done
          
      - name: Add summary comment
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            # Code Analysis Complete
            
            I've added inline comments to the changed files with analysis results.
            
            *Automated analysis performed on changed files*
          comment_tag: code-analysis-summary
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}